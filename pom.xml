<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>de.eschleining</groupId>
	<artifactId>RESTJsonSort</artifactId>
	<version>1.6-SNAPSHOT</version>
	<packaging>pom</packaging>
	<scm>
		<developerConnection>scm:git:git@github.com:eschleining/RESTJsonSort.git</developerConnection>
		<tag>HEAD</tag>
	</scm>
	<distributionManagement>
		<repository>
			<id>bintray</id>
			<url>https://api.bintray.com/content/${bintray.user}/maven/REST-Example/${project.version}/</url>
		</repository>
	</distributionManagement>

	<properties>
		<junit.version>4.12</junit.version>
		<jersey-json.version>1.8</jersey-json.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<!-- The Cargo container type -->
		<cargo.container.id>tomcat7x</cargo.container.id>
		<!-- The URL of the Zip file based installer for the container that Cargo 
			is to deploy -->
		<cargo.container.url>http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.8/bin/apache-tomcat-7.0.8.zip</cargo.container.url>
		<!-- The location where downloaded container Zip file installers are cached -->
		<cargo.container.download.dir>${user.home}/.m2/cargo/containers</cargo.container.download.dir>
		<!-- The port used by the forked container -->
		<cargo.container.port>8080</cargo.container.port>
		<!-- When using Tomcat, the AJP connector listen port -->
		<cargo.container.tomcat.ajp.port>8009</cargo.container.tomcat.ajp.port>
		<!-- The RMI port used on the container. For Tomcat, this is the value 
			of the /Server/@port attribute. -->
		<cargo.container.rmi.port>8205</cargo.container.rmi.port>
		<!-- Optional JVM arguments for the forked container that are prepended 
			to the option that configures the Zommons config location and appended to 
			any debugging configuration set by cargo.container.jvmargs.debug (See cargo-debug 
			profile.) -->
		<cargo.container.jvmargs />
		<!-- The port to use when the debugger is enabled. -->
		<cargo.container.debug.port>8000</cargo.container.debug.port>
		<!-- The suspend setting to use when the debugger is enabled. -->
		<cargo.container.debug.suspend>n</cargo.container.debug.suspend>
		<!-- The debug arguments used to enable debugging on the forked JVM. -->
		<cargo.container.debug.jvmargs>-Xdebug
			-Xrunjdwp:transport=dt_socket,server=y,suspend=${cargo.container.debug.suspend},address=${cargo.container.debug.port}
			-Xnoagent -Djava.compiler=NONE</cargo.container.debug.jvmargs>
		<cargo.container.jvmargs.debug />

		<cargo.deployable.default.groupId>${project.groupId}</cargo.deployable.default.groupId>
		<cargo.deployable.default.artifactId>${project.artifactId}</cargo.deployable.default.artifactId>
		<cargo.deployable.default.context>${project.artifactId}</cargo.deployable.default.context>
	</properties>

	<modules>
		<module>RESTSortHelper</module>
		<module>RESTSortServer</module>
		<module>RESTSortClient</module>
	</modules>
	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.3</version>
					<configuration>
						<source>1.7</source>
						<target>1.7</target>
					</configuration>
				</plugin>
				<plugin>
					<artifactId>maven-release-plugin</artifactId>
					<version>2.5.1</version>
					<configuration>
						<useReleaseProfile>false</useReleaseProfile>
						<releaseProfiles>release</releaseProfiles>
						<autoVersionSubmodules>true</autoVersionSubmodules>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<version>2.18.1</version>
					<executions>
						<execution>
							<id>verify</id>
							<goals>
								<goal>integration-test</goal>
								<goal>verify</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.codehaus.cargo</groupId>
					<artifactId>cargo-maven2-plugin</artifactId>
					<version>1.4.16</version>
					<configuration>
						<container>
							<containerId>${cargo.container.id}</containerId>
							<zipUrlInstaller>
								<url>${cargo.container.url}</url>
								<downloadDir>${cargo.container.download.dir}</downloadDir>
							</zipUrlInstaller>
							<log>${project.build.directory}/cargo/logs/cargo.log</log>
							<output>${project.build.directory}/cargo/logs/container.log</output>
						</container>
						<deployables>
							<deployable>
								<groupId>${cargo.deployable.default.groupId}</groupId>
								<artifactId>${cargo.deployable.default.artifactId}</artifactId>
								<type>war</type>
								<properties>
									<context>${cargo.deployable.default.context}</context>
								</properties>
							</deployable>
						</deployables>
					</configuration>
					<executions>
						<execution>
							<id>start-container</id>
							<phase>pre-integration-test</phase>
							<goals>
								<goal>start</goal>
							</goals>
							<!-- We bring this configuration down into the start goal since this 
								configuration really only applies to the startup activities. This is particularly 
								relevant for forked JVM debugging since the stop goal will try to launch 
								another JVM using the same JVM args if we leave this configuration at the 
								plug-in level. When the debugger is in use, there will be a port collision 
								and the build will hang. -->
							<configuration>
								<configuration>
									<properties>
										<cargo.jvmargs>
											${cargo.container.jvmargs.debug}
											${cargo.container.jvmargs}
										</cargo.jvmargs>
										<cargo.servlet.port>${cargo.container.port}</cargo.servlet.port>
										<cargo.tomcat.ajp.port>${cargo.container.tomcat.ajp.port}</cargo.tomcat.ajp.port>
										<cargo.rmi.port>${cargo.container.rmi.port}</cargo.rmi.port>
									</properties>
								</configuration>
							</configuration>
						</execution>
						<execution>
							<id>default-cli</id>
							<goals>
								<goal>run</goal>
							</goals>
							<!-- We bring this configuration down into the CLI run goal because 
								we need it to apply to the run goal too. See note in the start goal as to 
								why it is needed in the first place. -->
							<configuration>
								<configuration>
									<properties>
										<cargo.jvmargs>
											${cargo.container.jvmargs.debug}
											${cargo.container.jvmargs}
										</cargo.jvmargs>
										<cargo.servlet.port>${cargo.container.port}</cargo.servlet.port>
										<cargo.tomcat.ajp.port>${cargo.container.tomcat.ajp.port}</cargo.tomcat.ajp.port>
										<cargo.rmi.port>${cargo.container.rmi.port}</cargo.rmi.port>
									</properties>
								</configuration>
							</configuration>
						</execution>
						<execution>
							<id>stop-container</id>
							<phase>post-integration-test</phase>
							<goals>
								<goal>stop</goal>
							</goals>
							<!-- We bring this configuration down into the stop goal because we 
								need it to apply to the stop goal too. -->
							<configuration>
								<configuration>
									<properties>
										<cargo.servlet.port>${cargo.container.port}</cargo.servlet.port>
										<cargo.tomcat.ajp.port>${cargo.container.tomcat.ajp.port}</cargo.tomcat.ajp.port>
										<cargo.rmi.port>${cargo.container.rmi.port}</cargo.rmi.port>
									</properties>
								</configuration>
							</configuration>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>com.sun.jersey</groupId>
				<artifactId>jersey-json</artifactId>
				<version>${jersey-json.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<profiles>
		<profile>
			<id>cargo-debug</id>
			<activation>
				<property>
					<name>cargo.debug</name>
				</property>
			</activation>
			<properties>
				<cargo.container.jvmargs.debug>${cargo.container.debug.jvmargs}</cargo.container.jvmargs.debug>
			</properties>
		</profile>

		<profile>
			<id>release</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-source-plugin</artifactId>
						<executions>
							<execution>
								<id>attach-sources</id>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-javadoc-plugin</artifactId>
						<executions>
							<execution>
								<id>attach-javadocs</id>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
